diff --git a/src/regal/RegalIff.cpp b/src/regal/RegalIff.cpp
index a4b9523..8fd36f1 100644
--- a/src/regal/RegalIff.cpp
+++ b/src/regal/RegalIff.cpp
@@ -1415,9 +1415,9 @@ void RFF::InitFixedFunction( RegalContext * ctx ) {
 #else
     es = GetProcAddress( "glClearDepth" ) == NULL;
 #endif
-    string v = (const char *)ctx->dsp->emuTbl.glGetString( GL_VERSION );
+    const char* v = (const char *)ctx->dsp->emuTbl.glGetString( GL_VERSION );
     // FIXME: Handle detecting legacy more generally...
-    legacy = v[0] == '2' && v[1] == '.';
+    legacy = !v || (v[0] == '2' && v[1] == '.');
     //legacy = v.find( "2.1 " ) != string::npos;
 
     shadowMatrixMode = GL_MODELVIEW;
diff --git a/src/regal/RegalInit.cpp b/src/regal/RegalInit.cpp
index f130051..dafea6d 100644
--- a/src/regal/RegalInit.cpp
+++ b/src/regal/RegalInit.cpp
@@ -59,7 +59,6 @@ static Init *init = NULL;
 extern "C" { void __stdcall RegCloseKey(void *); }
 extern "C" { void __stdcall DeleteDC   (void *); }
 extern "C" { void __stdcall GetFocus   (void); }
-
 extern "C" { static void (__stdcall * myRegCloseKey)(void *) = RegCloseKey; }
 extern "C" { static void (__stdcall * myDeleteDC   )(void *) = DeleteDC;    }
 extern "C" { static void (__stdcall * myGetFocus   )(void  ) = GetFocus;    }
@@ -86,8 +85,22 @@ extern "C" { DWORD __stdcall GetCurrentThreadId(void); }
 DispatchTableGlobal dispatchTableGlobal;
 
 #if REGAL_SYS_WGL
-
+#if REGAL_TLS_API
+    DWORD regalCurrentContextTLSIDX = ~0;
+    struct RegalPrivateTlsInit {
+        RegalPrivateTlsInit()
+        {
+	    regalCurrentContextTLSIDX = TlsAlloc();
+        }
+        ~RegalPrivateTlsInit()
+        {
+	    TlsFree( regalCurrentContextTLSIDX );
+        }
+    };
+    RegalPrivateTlsInit regalPrivateTlsInit;
+#else
     __declspec( thread ) void * regalCurrentContext = NULL;
+#endif
 
     inline Thread RegalPrivateThreadSelf()
     {
@@ -134,7 +147,13 @@ void RegalPrivateMakeCurrent(RegalSystemContext sysCtx)
         if (!ctx) {
             ctx = new RegalContext();
 #if REGAL_SYS_WGL
+#if REGAL_TLS_API
+            if (regalCurrentContextTLSIDX == ~0) 
+  	        regalCurrentContextTLSIDX = TlsAlloc();
+	    TlsSetValue( regalCurrentContextTLSIDX, ctx );
+#else
             regalCurrentContext = ctx;
+#endif
 #else
             if (regalPrivateCurrentContextKey == 0) {
                 pthread_key_create( & regalPrivateCurrentContextKey, NULL );
@@ -159,7 +178,13 @@ void RegalPrivateMakeCurrent(RegalSystemContext sysCtx)
     th2rc[ thread ] = ctx;
     ctx->thread = thread;
 #if REGAL_SYS_WGL
+#if REGAL_TLS_API
+       if (regalCurrentContextTLSIDX == ~0) 
+           regalCurrentContextTLSIDX = TlsAlloc();
+	TlsSetValue( regalCurrentContextTLSIDX, ctx );
+#else
         regalCurrentContext = ctx;
+#endif
 #else
         pthread_setspecific( regalPrivateCurrentContextKey, ctx );
 #endif
@@ -174,7 +199,11 @@ void RegalPrivateMakeCurrent(RegalSystemContext sysCtx)
       }
     }
 #if REGAL_SYS_WGL
+#if REGAL_TLS_API
+    TlsSetValue( regalCurrentContextTLSIDX, NULL );
+#else
     regalCurrentContext = NULL;
+#endif
 #else
     pthread_setspecific( regalPrivateCurrentContextKey, NULL );
 #endif
diff --git a/src/regal/RegalPrivate.h b/src/regal/RegalPrivate.h
index 8aba267..771db41 100644
--- a/src/regal/RegalPrivate.h
+++ b/src/regal/RegalPrivate.h
@@ -116,16 +116,28 @@ const GLuint RFF2ATexEnd16 = 16;
 extern void RegalPrivateMakeCurrent(RegalSystemContext sysCtx);
 
 #if REGAL_SYS_WGL
-
     typedef DWORD Thread;
+#if REGAL_TLS_API
+
+    extern "C" { unsigned __stdcall TlsAlloc    (void);             }
+    extern "C" { int      __stdcall TlsFree     (unsigned);         }
+    extern "C" { void *   __stdcall TlsGetValue (unsigned);         }
+    extern "C" { int      __stdcall TlsSetValue (unsigned, void *); }
+
+    extern DWORD regalCurrentContextTLSIDX;
 
+    inline void * RegalPrivateGetCurrentContext()
+    {
+        return TlsGetValue( regalCurrentContextTLSIDX );
+    }
+#else
     extern __declspec( thread ) void * regalCurrentContext;
 
     inline void * RegalPrivateGetCurrentContext()
     {
         return regalCurrentContext;
     }
-
+#endif
 #else
     typedef pthread_t Thread;
 
